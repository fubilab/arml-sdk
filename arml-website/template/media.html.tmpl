{{!Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license.}}
{{!master(layout/_master.tmpl)}}
<h1>{{title}}</h1>
<div class="hdescription">
  <p>{{description}}</p>
  {{{introduction}}}
</div>
{{#items.Length}}
<script>
  let modelList = []
</script>
<div class="media-container cards-container">
{{#items}}
  {{>partials/mediacard}}
{{/items}}
</div>
{{/items.Length}}
<div id="v3d_modal" class="view3d-wrapper">
  <div class="v3d_modal_titlebox">
    <h3 id="v3d_modal_name" />
    <div id="v3d_modal_description" />
  </div>
  <div class="v3d_modal_close" onclick="hideModal()">‚ùå</div>
  <svg id="v3d_modal_loading" width="40" height="40" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><style>.spinner_V8m1{transform-origin:center;animation:spinner_zKoa 2s linear infinite}.spinner_V8m1 circle{stroke-linecap:round;animation:spinner_YpZS 1.5s ease-in-out infinite}@keyframes spinner_zKoa{100%{transform:rotate(360deg)}}@keyframes spinner_YpZS{0%{stroke-dasharray:0 150;stroke-dashoffset:0}47.5%{stroke-dasharray:42 150;stroke-dashoffset:-16}95%,100%{stroke-dasharray:42 150;stroke-dashoffset:-59}}</style><g class="spinner_V8m1"><circle cx="12" cy="12" r="9.5" fill="none" stroke-width="1"></circle></g></svg>
  <div id="v3d_modal_toolbar">
    <div id="v3d_modal_layers">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="inherit" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" class="feather feather-eye"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle></svg>
    </div>
    <div id="v3d_modal_downloads">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" class="feather feather-download"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="7 10 12 15 17 10"></polyline><line x1="12" y1="15" x2="12" y2="3"></line></svg>
      <a alt="GLB">GLB</a>
      <a alt="IGS">IGS</a>
      <a alt="STL">STL</a>
    </div>
</div>
</div>

<script src="{{_rel}}public/view3d.pkgd.min.js"></script>
<script>
  let v3dCurrent = null
  let modelDefCurrent = null
  const v3dModal = document.getElementById('v3d_modal')
  let v3dModalCanvas
  let v3dLayerToggles = []
  const v3dModalLoading = document.getElementById('v3d_modal_loading')
  const v3dModalLayerDiv = document.getElementById('v3d_modal_layers');
  const v3dModalName = document.getElementById('v3d_modal_name')
  const v3dModalDescription = document.getElementById('v3d_modal_description')
  const v3dModalDownloads = document.querySelectorAll('#v3d_modal_downloads a');
  const v3dModalDownloadLinks = {
    GLB: v3dModalDownloads.item(0),
    IGS: v3dModalDownloads.item(1),
    STL: v3dModalDownloads.item(2)
  }
  function showModal() {
    document.body.parentElement.style.overflow = 'hidden'
    v3dModal.style.display = 'flex'
    
  }
  function hideModal() {
    document.body.parentElement.style.overflow = 'auto'
    v3dCurrent.destroy()
    v3dModal.style.display = 'none'
    v3dModal.removeChild(v3dModalCanvas)
    modelDefCurrent.groups.forEach((group) => {
      group.visible = true
    })
  }
  function populateLayers() {
    //clear existing
    v3dLayerToggles.forEach(el => v3dModalLayerDiv.removeChild(el))
    v3dLayerToggles = []
    v3dModalLayerDiv.style.display = modelDefCurrent.groups.length ? 'flex' : 'none'
    modelDefCurrent.groups.forEach((group) => {
      const layerToggle = v3dModalLayerDiv.appendChild(document.createElement('span'))
      v3dLayerToggles.push(layerToggle)
      layerToggle.innerText = group.name
      layerToggle.className = group.visible ? 'visible' : ''
      layerToggle.addEventListener('click', () => {
        group.visible = !group.visible
        layerToggle.className = group.visible ? 'visible' : ''
        group.meshes.forEach((meshName) => {
          const mesh = v3dCurrent.scene.root.getObjectByName(meshName)
          if (mesh) {
            mesh.visible = group.visible
          }
        })
        v3dCurrent.renderer.threeRenderer.render(v3dCurrent.scene.root, v3dCurrent.camera.threeCamera)
      })
    })
  }
  modelList.forEach((modelDef) => {
    const clickHandler = () => {
        const v3dOptions = {
          ...modelDef.v3d,
          autoplay: {
            disableOnInterrupt: true,
            speed: 0.2,
          },
          pitch: 8,
          scrollable: false
        }
        v3dModalCanvas = v3dModal.appendChild(document.createElement('canvas'))
        v3dModalCanvas.className = 'view3d-canvas'
        v3dModalCanvas.style.visibility = 'hidden'
        v3dModalLoading.style.visibility = 'visible'
        v3dCurrent = new View3D(v3dModal, v3dOptions)
        v3dModalName.innerText = modelDef.name
        v3dModalDescription.innerHTML= modelDef.description
        v3dModalDownloads.forEach(n => {
          n.style.display = 'none'
        })
        modelDef.assets.forEach(a => {
          v3dModalDownloadLinks[a.format].style.display = 'block'
          v3dModalDownloadLinks[a.format].href = a.url
        })
        modelDefCurrent = modelDef
        v3dCurrent.on('loadFinish', () => {
          v3dModalCanvas.style.visibility = 'visible'
          v3dModalLoading.style.visibility = 'hidden'
          populateLayers(modelDef)
        })
        showModal()
    }
    const triggers = document.getElementsByClassName(modelDef.triggerClass)
    for (var i = 0; i < triggers.length; i++) {
      triggers.item(i).addEventListener('click', clickHandler)
    }
  })
</script>